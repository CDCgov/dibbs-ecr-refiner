[tool.ruff]
# core configuration
# - skip checking these directories/files
exclude = [".git", ".pytest_cache", "__pycache__", "docs", "examples/"]
# - match black's default line length
line-length = 88
indent-width = 4
show-fixes = true
target-version = "py313"

[tool.ruff.lint]
# rule selection with comments for clarity
extend-select = [
  # type annotation rules
  # - missing type annotation for function argument
  "ANN001",
  # - missing type annotation for *args
  "ANN002",
  # - missing return type annotation for public function
  "ANN201",

  # standard rules
  # - errors and style from pycodestyle
  "E",
  "W",
  # - pyflakes logical error checks
  "F",

  # TODO: add to avoid common bug patterns; will require
  # a bit of effort to make corrections
  # - bugbear common bug patterns
  # "B",

  # - comprehension checks
  "C4",
  # - docstring rules
  "D",
  # - import sorting
  "I",
  # - python code modernization
  "UP",
]

# rules we explicitly disable
ignore = [
  # - allow function calls in argument defaults (FastAPI pattern)
  "B008",
  # - ignore missing module docstring rule
  "D100",
  # - one-line docstring rule (too restrictive)
  "D200",
  # - allow blank lines after docstrings
  "D202",
  # - allow multi-line docstrings to start on second line
  "D212",
  # - allow indented first lines in docstrings
  "D213",
  # - first line imperative mood (too restrictive for APIs)
  "D401",
  # - line too long (handled by black/formatter)
  "E501",
]

# file-specific rule exclusions
[tool.ruff.lint.per-file-ignores]
# - disable docstring/type/security rules in tests
"**/tests/*" = ["D", "S", "ANN"]
# - disable docstring/type/security rules in lambda
"**/lambda/*" = ["D", "S", "ANN"]
# - allow missing docstrings in __init__
"__init__.py" = ["D"]

# configure docstring checking to use Google style
[tool.ruff.lint.pydocstyle]
convention = "google"

# import configuration
[tool.ruff.lint.isort]
# - project-specific imports
known-first-party = ["app", "pipeline"]
# - key third-party imports
known-third-party = ["fastapi", "pydantic", "starlette", "psycopg"]

# keep runtime type annotations
[tool.ruff.lint.pyupgrade]
keep-runtime-typing = true

# mypy type checking
[tool.mypy]
files = ["app/**/*.py", "database/pipeline/**/*.py", "database/scripts/**/*.py"]

# centralize all pytest configration
# * where python unit tests are located
# * make sure integration tests that use testcontainers have custom markers
[tool.pytest.ini_options]
testpaths = ["database/tests", "refiner/tests"]
addopts = "--strict-markers -v"
asyncio_mode = "strict"
markers = [
  "integration: marks tests as integration (deselect with '-m \"not integration\"')",
]
