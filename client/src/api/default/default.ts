/**
 * Generated by orval v7.11.2 üç∫
 * Do not edit manually.
 * DIBBs eCR Refiner
 * Please visit the repo for more info: https://github.com/CDCgov/dibbs-ecr-refiner
 * OpenAPI spec version: 1.0.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import * as axios from 'axios';
import type {
  AxiosError,
  AxiosRequestConfig,
  AxiosResponse
} from 'axios';

import type {
  AssociateCodesetInput,
  AssociateCodesetResponse,
  HTTPValidationError
} from '.././schemas';





/**
 * Associate a specified code set with the given configuration.

Args:
    configuration_id (UUID): ID of the configuration
    body (AssociateCodesetInput): payload containing a condition_id
    user (dict[str, Any], optional): User making the request
    db (AsyncDatabaseConnection, optional): Database connection

Raises:
    HTTPException: 404 if configuration is not found in JD
    HTTPException: 404 if condition is not found
    HTTPException: 500 if configuration is cannot be updated

Returns:
    AssociateCodesetResponse: ID of updated configuration and the full list of included conditions
 * @summary Associate Condition Codeset With Configuration
 */
export const associateConditionCodesetWithConfigurationApiV1ConfigurationsConfigurationIdCodeSetPut = (
    configurationId: string,
    associateCodesetInput: AssociateCodesetInput, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<AssociateCodesetResponse>> => {
    
    
    return axios.default.put(
      `/api/v1/configurations/${configurationId}/code-set`,
      associateCodesetInput,options
    );
  }



export const getAssociateConditionCodesetWithConfigurationApiV1ConfigurationsConfigurationIdCodeSetPutMutationOptions = <TError = AxiosError<HTTPValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof associateConditionCodesetWithConfigurationApiV1ConfigurationsConfigurationIdCodeSetPut>>, TError,{configurationId: string;data: AssociateCodesetInput}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof associateConditionCodesetWithConfigurationApiV1ConfigurationsConfigurationIdCodeSetPut>>, TError,{configurationId: string;data: AssociateCodesetInput}, TContext> => {

const mutationKey = ['associateConditionCodesetWithConfigurationApiV1ConfigurationsConfigurationIdCodeSetPut'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof associateConditionCodesetWithConfigurationApiV1ConfigurationsConfigurationIdCodeSetPut>>, {configurationId: string;data: AssociateCodesetInput}> = (props) => {
          const {configurationId,data} = props ?? {};

          return  associateConditionCodesetWithConfigurationApiV1ConfigurationsConfigurationIdCodeSetPut(configurationId,data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type AssociateConditionCodesetWithConfigurationApiV1ConfigurationsConfigurationIdCodeSetPutMutationResult = NonNullable<Awaited<ReturnType<typeof associateConditionCodesetWithConfigurationApiV1ConfigurationsConfigurationIdCodeSetPut>>>
    export type AssociateConditionCodesetWithConfigurationApiV1ConfigurationsConfigurationIdCodeSetPutMutationBody = AssociateCodesetInput
    export type AssociateConditionCodesetWithConfigurationApiV1ConfigurationsConfigurationIdCodeSetPutMutationError = AxiosError<HTTPValidationError>

    /**
 * @summary Associate Condition Codeset With Configuration
 */
export const useAssociateConditionCodesetWithConfigurationApiV1ConfigurationsConfigurationIdCodeSetPut = <TError = AxiosError<HTTPValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof associateConditionCodesetWithConfigurationApiV1ConfigurationsConfigurationIdCodeSetPut>>, TError,{configurationId: string;data: AssociateCodesetInput}, TContext>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof associateConditionCodesetWithConfigurationApiV1ConfigurationsConfigurationIdCodeSetPut>>,
        TError,
        {configurationId: string;data: AssociateCodesetInput},
        TContext
      > => {

      const mutationOptions = getAssociateConditionCodesetWithConfigurationApiV1ConfigurationsConfigurationIdCodeSetPutMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * Download the unrefined sample eCR zip file.
 * @summary Demo Download
 */
export const demoDownloadApiV1DemoDownloadGet = (
     options?: AxiosRequestConfig
 ): Promise<AxiosResponse<unknown>> => {
    
    
    return axios.default.get(
      `/api/v1/demo/download`,options
    );
  }


export const getDemoDownloadApiV1DemoDownloadGetQueryKey = () => {
    return [`/api/v1/demo/download`] as const;
    }

    
export const getDemoDownloadApiV1DemoDownloadGetQueryOptions = <TData = Awaited<ReturnType<typeof demoDownloadApiV1DemoDownloadGet>>, TError = AxiosError<unknown>>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof demoDownloadApiV1DemoDownloadGet>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getDemoDownloadApiV1DemoDownloadGetQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof demoDownloadApiV1DemoDownloadGet>>> = ({ signal }) => demoDownloadApiV1DemoDownloadGet({ signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof demoDownloadApiV1DemoDownloadGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type DemoDownloadApiV1DemoDownloadGetQueryResult = NonNullable<Awaited<ReturnType<typeof demoDownloadApiV1DemoDownloadGet>>>
export type DemoDownloadApiV1DemoDownloadGetQueryError = AxiosError<unknown>


export function useDemoDownloadApiV1DemoDownloadGet<TData = Awaited<ReturnType<typeof demoDownloadApiV1DemoDownloadGet>>, TError = AxiosError<unknown>>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof demoDownloadApiV1DemoDownloadGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof demoDownloadApiV1DemoDownloadGet>>,
          TError,
          Awaited<ReturnType<typeof demoDownloadApiV1DemoDownloadGet>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useDemoDownloadApiV1DemoDownloadGet<TData = Awaited<ReturnType<typeof demoDownloadApiV1DemoDownloadGet>>, TError = AxiosError<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof demoDownloadApiV1DemoDownloadGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof demoDownloadApiV1DemoDownloadGet>>,
          TError,
          Awaited<ReturnType<typeof demoDownloadApiV1DemoDownloadGet>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useDemoDownloadApiV1DemoDownloadGet<TData = Awaited<ReturnType<typeof demoDownloadApiV1DemoDownloadGet>>, TError = AxiosError<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof demoDownloadApiV1DemoDownloadGet>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Demo Download
 */

export function useDemoDownloadApiV1DemoDownloadGet<TData = Awaited<ReturnType<typeof demoDownloadApiV1DemoDownloadGet>>, TError = AxiosError<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof demoDownloadApiV1DemoDownloadGet>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getDemoDownloadApiV1DemoDownloadGetQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



