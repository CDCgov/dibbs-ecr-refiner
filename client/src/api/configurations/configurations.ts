/**
 * Generated by orval v7.13.0 üç∫
 * Do not edit manually.
 * DIBBs eCR Refiner
 * Please visit the repo for more info: https://github.com/CDCgov/dibbs-ecr-refiner
 * OpenAPI spec version: 1.0.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import * as axios from 'axios';
import type {
  AxiosError,
  AxiosRequestConfig,
  AxiosResponse
} from 'axios';

import type {
  AddCustomCodeInput,
  AssociateCodesetInput,
  AssociateCodesetResponse,
  BodyRunInlineConfigurationTest,
  ConfigurationCustomCodeResponse,
  ConfigurationTestResponse,
  CreateConfigInput,
  CreateConfigurationResponse,
  GetConfigurationResponse,
  GetConfigurationsResponse,
  HTTPValidationError,
  UpdateCustomCodeInput,
  UpdateSectionProcessingPayload,
  UpdateSectionProcessingResponse
} from '.././schemas';





/**
 * Returns a list of configurations based on the logged-in user.

Returns:
    List of configuration objects.
 * @summary Get Configurations
 */
export const getConfigurations = (
     options?: AxiosRequestConfig
 ): Promise<AxiosResponse<GetConfigurationsResponse[]>> => {
    
    
    return axios.default.get(
      `/api/v1/configurations/`,options
    );
  }


export const getGetConfigurationsQueryKey = () => {
    return [`/api/v1/configurations/`] as const;
    }

    
export const getGetConfigurationsQueryOptions = <TData = Awaited<ReturnType<typeof getConfigurations>>, TError = AxiosError<unknown>>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getConfigurations>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetConfigurationsQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getConfigurations>>> = ({ signal }) => getConfigurations({ signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getConfigurations>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetConfigurationsQueryResult = NonNullable<Awaited<ReturnType<typeof getConfigurations>>>
export type GetConfigurationsQueryError = AxiosError<unknown>


export function useGetConfigurations<TData = Awaited<ReturnType<typeof getConfigurations>>, TError = AxiosError<unknown>>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getConfigurations>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getConfigurations>>,
          TError,
          Awaited<ReturnType<typeof getConfigurations>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetConfigurations<TData = Awaited<ReturnType<typeof getConfigurations>>, TError = AxiosError<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getConfigurations>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getConfigurations>>,
          TError,
          Awaited<ReturnType<typeof getConfigurations>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetConfigurations<TData = Awaited<ReturnType<typeof getConfigurations>>, TError = AxiosError<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getConfigurations>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Configurations
 */

export function useGetConfigurations<TData = Awaited<ReturnType<typeof getConfigurations>>, TError = AxiosError<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getConfigurations>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetConfigurationsQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * Create a new configuration for a jurisdiction.
 * @summary Create Configuration
 */
export const createConfiguration = (
    createConfigInput: CreateConfigInput, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<CreateConfigurationResponse>> => {
    
    
    return axios.default.post(
      `/api/v1/configurations/`,
      createConfigInput,options
    );
  }



export const getCreateConfigurationMutationOptions = <TError = AxiosError<HTTPValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createConfiguration>>, TError,{data: CreateConfigInput}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof createConfiguration>>, TError,{data: CreateConfigInput}, TContext> => {

const mutationKey = ['createConfiguration'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof createConfiguration>>, {data: CreateConfigInput}> = (props) => {
          const {data} = props ?? {};

          return  createConfiguration(data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CreateConfigurationMutationResult = NonNullable<Awaited<ReturnType<typeof createConfiguration>>>
    export type CreateConfigurationMutationBody = CreateConfigInput
    export type CreateConfigurationMutationError = AxiosError<HTTPValidationError>

    /**
 * @summary Create Configuration
 */
export const useCreateConfiguration = <TError = AxiosError<HTTPValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createConfiguration>>, TError,{data: CreateConfigInput}, TContext>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof createConfiguration>>,
        TError,
        {data: CreateConfigInput},
        TContext
      > => {

      const mutationOptions = getCreateConfigurationMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * Get a single configuration by its ID including all associated conditions.
 * @summary Get Configuration
 */
export const getConfiguration = (
    configurationId: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<GetConfigurationResponse>> => {
    
    
    return axios.default.get(
      `/api/v1/configurations/${configurationId}`,options
    );
  }


export const getGetConfigurationQueryKey = (configurationId?: string,) => {
    return [`/api/v1/configurations/${configurationId}`] as const;
    }

    
export const getGetConfigurationQueryOptions = <TData = Awaited<ReturnType<typeof getConfiguration>>, TError = AxiosError<HTTPValidationError>>(configurationId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getConfiguration>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetConfigurationQueryKey(configurationId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getConfiguration>>> = ({ signal }) => getConfiguration(configurationId, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(configurationId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getConfiguration>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetConfigurationQueryResult = NonNullable<Awaited<ReturnType<typeof getConfiguration>>>
export type GetConfigurationQueryError = AxiosError<HTTPValidationError>


export function useGetConfiguration<TData = Awaited<ReturnType<typeof getConfiguration>>, TError = AxiosError<HTTPValidationError>>(
 configurationId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getConfiguration>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getConfiguration>>,
          TError,
          Awaited<ReturnType<typeof getConfiguration>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetConfiguration<TData = Awaited<ReturnType<typeof getConfiguration>>, TError = AxiosError<HTTPValidationError>>(
 configurationId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getConfiguration>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getConfiguration>>,
          TError,
          Awaited<ReturnType<typeof getConfiguration>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetConfiguration<TData = Awaited<ReturnType<typeof getConfiguration>>, TError = AxiosError<HTTPValidationError>>(
 configurationId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getConfiguration>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Configuration
 */

export function useGetConfiguration<TData = Awaited<ReturnType<typeof getConfiguration>>, TError = AxiosError<HTTPValidationError>>(
 configurationId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getConfiguration>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetConfigurationQueryOptions(configurationId,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * Create a CSV export of a configuration and all associated codes.
 * @summary Get Configuration Export
 */
export const getConfigurationExport = (
    configurationId: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    
    
    return axios.default.get(
      `/api/v1/configurations/${configurationId}/export`,options
    );
  }


export const getGetConfigurationExportQueryKey = (configurationId?: string,) => {
    return [`/api/v1/configurations/${configurationId}/export`] as const;
    }

    
export const getGetConfigurationExportQueryOptions = <TData = Awaited<ReturnType<typeof getConfigurationExport>>, TError = AxiosError<HTTPValidationError>>(configurationId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getConfigurationExport>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetConfigurationExportQueryKey(configurationId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getConfigurationExport>>> = ({ signal }) => getConfigurationExport(configurationId, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(configurationId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getConfigurationExport>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetConfigurationExportQueryResult = NonNullable<Awaited<ReturnType<typeof getConfigurationExport>>>
export type GetConfigurationExportQueryError = AxiosError<HTTPValidationError>


export function useGetConfigurationExport<TData = Awaited<ReturnType<typeof getConfigurationExport>>, TError = AxiosError<HTTPValidationError>>(
 configurationId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getConfigurationExport>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getConfigurationExport>>,
          TError,
          Awaited<ReturnType<typeof getConfigurationExport>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetConfigurationExport<TData = Awaited<ReturnType<typeof getConfigurationExport>>, TError = AxiosError<HTTPValidationError>>(
 configurationId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getConfigurationExport>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getConfigurationExport>>,
          TError,
          Awaited<ReturnType<typeof getConfigurationExport>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetConfigurationExport<TData = Awaited<ReturnType<typeof getConfigurationExport>>, TError = AxiosError<HTTPValidationError>>(
 configurationId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getConfigurationExport>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Configuration Export
 */

export function useGetConfigurationExport<TData = Awaited<ReturnType<typeof getConfigurationExport>>, TError = AxiosError<HTTPValidationError>>(
 configurationId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getConfigurationExport>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetConfigurationExportQueryOptions(configurationId,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * Associate a specified code set with the given configuration.

Args:
    configuration_id (UUID): ID of the configuration
    body (AssociateCodesetInput): payload containing a condition_id
    user (dict[str, Any], optional): User making the request
    db (AsyncDatabaseConnection, optional): Database connection

Raises:
    HTTPException: 404 if configuration is not found in JD
    HTTPException: 404 if condition is not found
    HTTPException: 500 if configuration is cannot be updated

Returns:
    AssociateCodesetResponse: ID of updated configuration, the full list of included conditions,
          and the condition_name
 * @summary Associate Condition Codeset With Configuration
 */
export const associateConditionWithConfiguration = (
    configurationId: string,
    associateCodesetInput: AssociateCodesetInput, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<AssociateCodesetResponse>> => {
    
    
    return axios.default.put(
      `/api/v1/configurations/${configurationId}/code-sets`,
      associateCodesetInput,options
    );
  }



export const getAssociateConditionWithConfigurationMutationOptions = <TError = AxiosError<HTTPValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof associateConditionWithConfiguration>>, TError,{configurationId: string;data: AssociateCodesetInput}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof associateConditionWithConfiguration>>, TError,{configurationId: string;data: AssociateCodesetInput}, TContext> => {

const mutationKey = ['associateConditionWithConfiguration'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof associateConditionWithConfiguration>>, {configurationId: string;data: AssociateCodesetInput}> = (props) => {
          const {configurationId,data} = props ?? {};

          return  associateConditionWithConfiguration(configurationId,data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type AssociateConditionWithConfigurationMutationResult = NonNullable<Awaited<ReturnType<typeof associateConditionWithConfiguration>>>
    export type AssociateConditionWithConfigurationMutationBody = AssociateCodesetInput
    export type AssociateConditionWithConfigurationMutationError = AxiosError<HTTPValidationError>

    /**
 * @summary Associate Condition Codeset With Configuration
 */
export const useAssociateConditionWithConfiguration = <TError = AxiosError<HTTPValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof associateConditionWithConfiguration>>, TError,{configurationId: string;data: AssociateCodesetInput}, TContext>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof associateConditionWithConfiguration>>,
        TError,
        {configurationId: string;data: AssociateCodesetInput},
        TContext
      > => {

      const mutationOptions = getAssociateConditionWithConfigurationMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * Remove a specified code set from the given configuration.

Args:
    configuration_id (UUID): ID of the configuration
    condition_id (UUID): ID of the condition to remove
    user (DbUser): User making the request
    db (AsyncDatabaseConnection): Database connection

Raises:
    HTTPException: 404 if configuration is not found in JD
    HTTPException: 404 if condition is not found
    HTTPException: 409 if trying to remove the main condition
    HTTPException: 500 if configuration is cannot be updated

Returns:
    AssociateCodesetResponse: ID of updated configuration and the full list
    of included conditions plus condition_name
 * @summary Remove Condition Codeset From Configuration
 */
export const disassociateConditionWithConfiguration = (
    configurationId: string,
    conditionId: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<AssociateCodesetResponse>> => {
    
    
    return axios.default.delete(
      `/api/v1/configurations/${configurationId}/code-sets/${conditionId}`,options
    );
  }



export const getDisassociateConditionWithConfigurationMutationOptions = <TError = AxiosError<HTTPValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof disassociateConditionWithConfiguration>>, TError,{configurationId: string;conditionId: string}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof disassociateConditionWithConfiguration>>, TError,{configurationId: string;conditionId: string}, TContext> => {

const mutationKey = ['disassociateConditionWithConfiguration'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof disassociateConditionWithConfiguration>>, {configurationId: string;conditionId: string}> = (props) => {
          const {configurationId,conditionId} = props ?? {};

          return  disassociateConditionWithConfiguration(configurationId,conditionId,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DisassociateConditionWithConfigurationMutationResult = NonNullable<Awaited<ReturnType<typeof disassociateConditionWithConfiguration>>>
    
    export type DisassociateConditionWithConfigurationMutationError = AxiosError<HTTPValidationError>

    /**
 * @summary Remove Condition Codeset From Configuration
 */
export const useDisassociateConditionWithConfiguration = <TError = AxiosError<HTTPValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof disassociateConditionWithConfiguration>>, TError,{configurationId: string;conditionId: string}, TContext>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof disassociateConditionWithConfiguration>>,
        TError,
        {configurationId: string;conditionId: string},
        TContext
      > => {

      const mutationOptions = getDisassociateConditionWithConfigurationMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * Add a user-defined custom code to a configuration.

Args:
    configuration_id (UUID): The ID of the configuration to update.
    body (AddCustomCodeInput): The custom code information provided by the user.
    user (dict[str, Any]): The logged-in user.
    db (AsyncDatabaseConnection): The database connection.

Raises:
    HTTPException: 404 if configuration isn't found
    HTTPException: 500 if custom code can't be added

Returns:
    ConfigurationCustomCodeResponse: Updated configuration
 * @summary Add Custom Code
 */
export const addCustomCodeToConfiguration = (
    configurationId: string,
    addCustomCodeInput: AddCustomCodeInput, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<ConfigurationCustomCodeResponse>> => {
    
    
    return axios.default.post(
      `/api/v1/configurations/${configurationId}/custom-codes`,
      addCustomCodeInput,options
    );
  }



export const getAddCustomCodeToConfigurationMutationOptions = <TError = AxiosError<HTTPValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof addCustomCodeToConfiguration>>, TError,{configurationId: string;data: AddCustomCodeInput}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof addCustomCodeToConfiguration>>, TError,{configurationId: string;data: AddCustomCodeInput}, TContext> => {

const mutationKey = ['addCustomCodeToConfiguration'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof addCustomCodeToConfiguration>>, {configurationId: string;data: AddCustomCodeInput}> = (props) => {
          const {configurationId,data} = props ?? {};

          return  addCustomCodeToConfiguration(configurationId,data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type AddCustomCodeToConfigurationMutationResult = NonNullable<Awaited<ReturnType<typeof addCustomCodeToConfiguration>>>
    export type AddCustomCodeToConfigurationMutationBody = AddCustomCodeInput
    export type AddCustomCodeToConfigurationMutationError = AxiosError<HTTPValidationError>

    /**
 * @summary Add Custom Code
 */
export const useAddCustomCodeToConfiguration = <TError = AxiosError<HTTPValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof addCustomCodeToConfiguration>>, TError,{configurationId: string;data: AddCustomCodeInput}, TContext>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof addCustomCodeToConfiguration>>,
        TError,
        {configurationId: string;data: AddCustomCodeInput},
        TContext
      > => {

      const mutationOptions = getAddCustomCodeToConfigurationMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * Modify a configuration's custom code based on system/code pair.

Args:
    configuration_id (UUID): The ID of the configuration to modify.
    body (UpdateCustomCodeInput): User-provided object containing custom code info.
    user (dict[str, Any]): The logged-in user.
    db (AsyncDatabaseConnection): The database connection.

Raises:
    HTTPException: 400 if a system is not provided
    HTTPException: 400 if a code is not provided
    HTTPException: 404 if the configuration can't be found
    HTTPException: 500 if the configuration can't be updated

Returns:
    ConfigurationCustomCodeResponse: The updated configuration.
 * @summary Edit Custom Code
 */
export const editCustomCodeFromConfiguration = (
    configurationId: string,
    updateCustomCodeInput: UpdateCustomCodeInput, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<ConfigurationCustomCodeResponse>> => {
    
    
    return axios.default.put(
      `/api/v1/configurations/${configurationId}/custom-codes`,
      updateCustomCodeInput,options
    );
  }



export const getEditCustomCodeFromConfigurationMutationOptions = <TError = AxiosError<HTTPValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof editCustomCodeFromConfiguration>>, TError,{configurationId: string;data: UpdateCustomCodeInput}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof editCustomCodeFromConfiguration>>, TError,{configurationId: string;data: UpdateCustomCodeInput}, TContext> => {

const mutationKey = ['editCustomCodeFromConfiguration'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof editCustomCodeFromConfiguration>>, {configurationId: string;data: UpdateCustomCodeInput}> = (props) => {
          const {configurationId,data} = props ?? {};

          return  editCustomCodeFromConfiguration(configurationId,data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type EditCustomCodeFromConfigurationMutationResult = NonNullable<Awaited<ReturnType<typeof editCustomCodeFromConfiguration>>>
    export type EditCustomCodeFromConfigurationMutationBody = UpdateCustomCodeInput
    export type EditCustomCodeFromConfigurationMutationError = AxiosError<HTTPValidationError>

    /**
 * @summary Edit Custom Code
 */
export const useEditCustomCodeFromConfiguration = <TError = AxiosError<HTTPValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof editCustomCodeFromConfiguration>>, TError,{configurationId: string;data: UpdateCustomCodeInput}, TContext>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof editCustomCodeFromConfiguration>>,
        TError,
        {configurationId: string;data: UpdateCustomCodeInput},
        TContext
      > => {

      const mutationOptions = getEditCustomCodeFromConfigurationMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * Delete a custom code from a configuration.

Args:
    configuration_id (UUID): The ID of the configuration to modify.
    system (str): System of the custom code.
    code (str): Code of the custom code.
    user (dict[str, Any]): The logged-in user.
    db (AsyncDatabaseConnection): The database connection.

Raises:
    HTTPException: 400 if system is not provided
    HTTPException: 400 if code is not provided
    HTTPException: 404 if configuration can't be found
    HTTPException: 500 if configuration can't be updated

Returns:
    ConfigurationCustomCodeResponse: The updated configuration
 * @summary Delete Custom Code
 */
export const deleteCustomCodeFromConfiguration = (
    configurationId: string,
    system: string,
    code: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<ConfigurationCustomCodeResponse>> => {
    
    
    return axios.default.delete(
      `/api/v1/configurations/${configurationId}/custom-codes/${system}/${code}`,options
    );
  }



export const getDeleteCustomCodeFromConfigurationMutationOptions = <TError = AxiosError<HTTPValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteCustomCodeFromConfiguration>>, TError,{configurationId: string;system: string;code: string}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof deleteCustomCodeFromConfiguration>>, TError,{configurationId: string;system: string;code: string}, TContext> => {

const mutationKey = ['deleteCustomCodeFromConfiguration'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteCustomCodeFromConfiguration>>, {configurationId: string;system: string;code: string}> = (props) => {
          const {configurationId,system,code} = props ?? {};

          return  deleteCustomCodeFromConfiguration(configurationId,system,code,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteCustomCodeFromConfigurationMutationResult = NonNullable<Awaited<ReturnType<typeof deleteCustomCodeFromConfiguration>>>
    
    export type DeleteCustomCodeFromConfigurationMutationError = AxiosError<HTTPValidationError>

    /**
 * @summary Delete Custom Code
 */
export const useDeleteCustomCodeFromConfiguration = <TError = AxiosError<HTTPValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteCustomCodeFromConfiguration>>, TError,{configurationId: string;system: string;code: string}, TContext>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof deleteCustomCodeFromConfiguration>>,
        TError,
        {configurationId: string;system: string;code: string},
        TContext
      > => {

      const mutationOptions = getDeleteCustomCodeFromConfigurationMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * Runs an in-line test using the provided configuration ID and test files.

Args:
    id (UUID): ID of Configuration to use for the test
    uploaded_file (UploadFile | None): user uploaded eICR/RR pair
    create_output_zip (Callable[..., tuple[str, io.BytesIO]]): service to create an in-memory zip file
    upload_refined_files_to_s3 (Callable[[UUID, io.BytesIO, str, Logger], str]): service to upload a zip to S3
    user (DbUser): Logged in user
    db (AsyncDatabaseConnection): Database connection
    sample_zip_path (Path): Path to example .zip eICR/RR pair
    logger (Logger): Standard logger
Returns:
    ConfigurationTestResponse: response given to the client
 * @summary Run Configuration Test
 */
export const runInlineConfigurationTest = (
    bodyRunInlineConfigurationTest: BodyRunInlineConfigurationTest, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<ConfigurationTestResponse>> => {
    
    const formData = new FormData();
formData.append(`id`, bodyRunInlineConfigurationTest.id)
if(bodyRunInlineConfigurationTest.uploaded_file !== undefined && bodyRunInlineConfigurationTest.uploaded_file !== null) {
 formData.append(`uploaded_file`, bodyRunInlineConfigurationTest.uploaded_file)
 }

    return axios.default.post(
      `/api/v1/configurations/test`,
      formData,options
    );
  }



export const getRunInlineConfigurationTestMutationOptions = <TError = AxiosError<HTTPValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof runInlineConfigurationTest>>, TError,{data: BodyRunInlineConfigurationTest}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof runInlineConfigurationTest>>, TError,{data: BodyRunInlineConfigurationTest}, TContext> => {

const mutationKey = ['runInlineConfigurationTest'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof runInlineConfigurationTest>>, {data: BodyRunInlineConfigurationTest}> = (props) => {
          const {data} = props ?? {};

          return  runInlineConfigurationTest(data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type RunInlineConfigurationTestMutationResult = NonNullable<Awaited<ReturnType<typeof runInlineConfigurationTest>>>
    export type RunInlineConfigurationTestMutationBody = BodyRunInlineConfigurationTest
    export type RunInlineConfigurationTestMutationError = AxiosError<HTTPValidationError>

    /**
 * @summary Run Configuration Test
 */
export const useRunInlineConfigurationTest = <TError = AxiosError<HTTPValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof runInlineConfigurationTest>>, TError,{data: BodyRunInlineConfigurationTest}, TContext>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof runInlineConfigurationTest>>,
        TError,
        {data: BodyRunInlineConfigurationTest},
        TContext
      > => {

      const mutationOptions = getRunInlineConfigurationTestMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * Update one or more section_processing entries for a configuration.

Args:
    configuration_id (UUID): ID of the configuration to update
    payload (UpdateSectionProcessingPayload): List of section updates with code and action
    user (DbUser): The logged-in user
    db (AsyncDatabaseConnection): Database connection

Raises:
    HTTPException: 404 if configuration isn't found
    HTTPException: 500 if section processing can't be updated

Returns:
    UpdateSectionProcessingResponse: The message to show the user
 * @summary Update Section Processing
 */
export const updateConfigurationSectionProcessing = (
    configurationId: string,
    updateSectionProcessingPayload: UpdateSectionProcessingPayload, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<UpdateSectionProcessingResponse>> => {
    
    
    return axios.default.patch(
      `/api/v1/configurations/${configurationId}/section-processing`,
      updateSectionProcessingPayload,options
    );
  }



export const getUpdateConfigurationSectionProcessingMutationOptions = <TError = AxiosError<HTTPValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateConfigurationSectionProcessing>>, TError,{configurationId: string;data: UpdateSectionProcessingPayload}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof updateConfigurationSectionProcessing>>, TError,{configurationId: string;data: UpdateSectionProcessingPayload}, TContext> => {

const mutationKey = ['updateConfigurationSectionProcessing'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof updateConfigurationSectionProcessing>>, {configurationId: string;data: UpdateSectionProcessingPayload}> = (props) => {
          const {configurationId,data} = props ?? {};

          return  updateConfigurationSectionProcessing(configurationId,data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UpdateConfigurationSectionProcessingMutationResult = NonNullable<Awaited<ReturnType<typeof updateConfigurationSectionProcessing>>>
    export type UpdateConfigurationSectionProcessingMutationBody = UpdateSectionProcessingPayload
    export type UpdateConfigurationSectionProcessingMutationError = AxiosError<HTTPValidationError>

    /**
 * @summary Update Section Processing
 */
export const useUpdateConfigurationSectionProcessing = <TError = AxiosError<HTTPValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateConfigurationSectionProcessing>>, TError,{configurationId: string;data: UpdateSectionProcessingPayload}, TContext>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof updateConfigurationSectionProcessing>>,
        TError,
        {configurationId: string;data: UpdateSectionProcessingPayload},
        TContext
      > => {

      const mutationOptions = getUpdateConfigurationSectionProcessingMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    