/**
 * Generated by orval v7.11.2 üç∫
 * Do not edit manually.
 * DIBBs eCR Refiner
 * Please visit the repo for more info: https://github.com/CDCgov/dibbs-ecr-refiner
 * OpenAPI spec version: 1.0.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import * as axios from 'axios';
import type {
  AxiosError,
  AxiosRequestConfig,
  AxiosResponse
} from 'axios';

import type {
  AssociateCodesetInput,
  AssociateCodesetResponse,
  CreateConfigInput,
  CreateConfigurationResponse,
  GetConfigurationResponse,
  GetConfigurationsResponse,
  HTTPValidationError
} from '.././schemas';





/**
 * Returns a list of configurations based on the logged-in user.

Returns:
    List of configuration objects.
 * @summary Get Configurations
 */
export const getConfigurations = (
     options?: AxiosRequestConfig
 ): Promise<AxiosResponse<GetConfigurationsResponse[]>> => {
    
    
    return axios.default.get(
      `/api/v1/configurations/`,options
    );
  }


export const getGetConfigurationsQueryKey = () => {
    return [`/api/v1/configurations/`] as const;
    }

    
export const getGetConfigurationsQueryOptions = <TData = Awaited<ReturnType<typeof getConfigurations>>, TError = AxiosError<unknown>>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getConfigurations>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetConfigurationsQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getConfigurations>>> = ({ signal }) => getConfigurations({ signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getConfigurations>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetConfigurationsQueryResult = NonNullable<Awaited<ReturnType<typeof getConfigurations>>>
export type GetConfigurationsQueryError = AxiosError<unknown>


export function useGetConfigurations<TData = Awaited<ReturnType<typeof getConfigurations>>, TError = AxiosError<unknown>>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getConfigurations>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getConfigurations>>,
          TError,
          Awaited<ReturnType<typeof getConfigurations>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetConfigurations<TData = Awaited<ReturnType<typeof getConfigurations>>, TError = AxiosError<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getConfigurations>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getConfigurations>>,
          TError,
          Awaited<ReturnType<typeof getConfigurations>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetConfigurations<TData = Awaited<ReturnType<typeof getConfigurations>>, TError = AxiosError<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getConfigurations>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Configurations
 */

export function useGetConfigurations<TData = Awaited<ReturnType<typeof getConfigurations>>, TError = AxiosError<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getConfigurations>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetConfigurationsQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * Create a new configuration for a jurisdiction.
 * @summary Create Configuration
 */
export const createConfiguration = (
    createConfigInput: CreateConfigInput, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<CreateConfigurationResponse>> => {
    
    
    return axios.default.post(
      `/api/v1/configurations/`,
      createConfigInput,options
    );
  }



export const getCreateConfigurationMutationOptions = <TError = AxiosError<HTTPValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createConfiguration>>, TError,{data: CreateConfigInput}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof createConfiguration>>, TError,{data: CreateConfigInput}, TContext> => {

const mutationKey = ['createConfiguration'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof createConfiguration>>, {data: CreateConfigInput}> = (props) => {
          const {data} = props ?? {};

          return  createConfiguration(data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CreateConfigurationMutationResult = NonNullable<Awaited<ReturnType<typeof createConfiguration>>>
    export type CreateConfigurationMutationBody = CreateConfigInput
    export type CreateConfigurationMutationError = AxiosError<HTTPValidationError>

    /**
 * @summary Create Configuration
 */
export const useCreateConfiguration = <TError = AxiosError<HTTPValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createConfiguration>>, TError,{data: CreateConfigInput}, TContext>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof createConfiguration>>,
        TError,
        {data: CreateConfigInput},
        TContext
      > => {

      const mutationOptions = getCreateConfigurationMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * Get a single configuration by its ID.

Args:
    configuration_id (UUID): ID of the configuration record
    user (dict[str, Any], optional): _description_. Defaults to Depends(get_logged_in_user).
    db (AsyncDatabaseConnection, optional): _description_. Defaults to Depends(get_db).

Returns:
    GetConfigurationResponse: Response from the API
 * @summary Get Configuration
 */
export const getConfiguration = (
    configurationId: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<GetConfigurationResponse>> => {
    
    
    return axios.default.get(
      `/api/v1/configurations/${configurationId}`,options
    );
  }


export const getGetConfigurationQueryKey = (configurationId?: string,) => {
    return [`/api/v1/configurations/${configurationId}`] as const;
    }

    
export const getGetConfigurationQueryOptions = <TData = Awaited<ReturnType<typeof getConfiguration>>, TError = AxiosError<HTTPValidationError>>(configurationId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getConfiguration>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetConfigurationQueryKey(configurationId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getConfiguration>>> = ({ signal }) => getConfiguration(configurationId, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(configurationId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getConfiguration>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetConfigurationQueryResult = NonNullable<Awaited<ReturnType<typeof getConfiguration>>>
export type GetConfigurationQueryError = AxiosError<HTTPValidationError>


export function useGetConfiguration<TData = Awaited<ReturnType<typeof getConfiguration>>, TError = AxiosError<HTTPValidationError>>(
 configurationId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getConfiguration>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getConfiguration>>,
          TError,
          Awaited<ReturnType<typeof getConfiguration>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetConfiguration<TData = Awaited<ReturnType<typeof getConfiguration>>, TError = AxiosError<HTTPValidationError>>(
 configurationId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getConfiguration>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getConfiguration>>,
          TError,
          Awaited<ReturnType<typeof getConfiguration>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetConfiguration<TData = Awaited<ReturnType<typeof getConfiguration>>, TError = AxiosError<HTTPValidationError>>(
 configurationId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getConfiguration>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Configuration
 */

export function useGetConfiguration<TData = Awaited<ReturnType<typeof getConfiguration>>, TError = AxiosError<HTTPValidationError>>(
 configurationId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getConfiguration>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetConfigurationQueryOptions(configurationId,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * Associate a specified code set with the given configuration.

Args:
    configuration_id (UUID): ID of the configuration
    body (AssociateCodesetInput): payload containing a condition_id
    user (dict[str, Any], optional): User making the request
    db (AsyncDatabaseConnection, optional): Database connection

Raises:
    HTTPException: 404 if configuration is not found in JD
    HTTPException: 404 if condition is not found
    HTTPException: 500 if configuration is cannot be updated

Returns:
    dict: ID of updated configuration, the full list of included conditions,
          and the condition_name
 * @summary Associate Condition Codeset With Configuration
 */
export const associateConditionWithConfiguration = (
    configurationId: string,
    associateCodesetInput: AssociateCodesetInput, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<AssociateCodesetResponse>> => {
    
    
    return axios.default.put(
      `/api/v1/configurations/${configurationId}/code-sets`,
      associateCodesetInput,options
    );
  }



export const getAssociateConditionWithConfigurationMutationOptions = <TError = AxiosError<HTTPValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof associateConditionWithConfiguration>>, TError,{configurationId: string;data: AssociateCodesetInput}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof associateConditionWithConfiguration>>, TError,{configurationId: string;data: AssociateCodesetInput}, TContext> => {

const mutationKey = ['associateConditionWithConfiguration'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof associateConditionWithConfiguration>>, {configurationId: string;data: AssociateCodesetInput}> = (props) => {
          const {configurationId,data} = props ?? {};

          return  associateConditionWithConfiguration(configurationId,data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type AssociateConditionWithConfigurationMutationResult = NonNullable<Awaited<ReturnType<typeof associateConditionWithConfiguration>>>
    export type AssociateConditionWithConfigurationMutationBody = AssociateCodesetInput
    export type AssociateConditionWithConfigurationMutationError = AxiosError<HTTPValidationError>

    /**
 * @summary Associate Condition Codeset With Configuration
 */
export const useAssociateConditionWithConfiguration = <TError = AxiosError<HTTPValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof associateConditionWithConfiguration>>, TError,{configurationId: string;data: AssociateCodesetInput}, TContext>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof associateConditionWithConfiguration>>,
        TError,
        {configurationId: string;data: AssociateCodesetInput},
        TContext
      > => {

      const mutationOptions = getAssociateConditionWithConfigurationMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * Remove a specified code set from the given configuration.

Args:
    configuration_id (UUID): ID of the configuration
    condition_id (UUID): ID of the condition to remove
    user (dict[str, Any], optional): User making the request
    db (AsyncDatabaseConnection, optional): Database connection

Raises:
    HTTPException: 404 if configuration is not found in JD
    HTTPException: 404 if condition is not found
    HTTPException: 500 if configuration is cannot be updated

Returns:
    dict: ID of updated configuration and the full list
    of included conditions plus condition_name
 * @summary Remove Condition Codeset From Configuration
 */
export const disassociateConditionWithConfiguration = (
    configurationId: string,
    conditionId: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<AssociateCodesetResponse>> => {
    
    
    return axios.default.delete(
      `/api/v1/configurations/${configurationId}/code-sets/${conditionId}`,options
    );
  }



export const getDisassociateConditionWithConfigurationMutationOptions = <TError = AxiosError<HTTPValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof disassociateConditionWithConfiguration>>, TError,{configurationId: string;conditionId: string}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof disassociateConditionWithConfiguration>>, TError,{configurationId: string;conditionId: string}, TContext> => {

const mutationKey = ['disassociateConditionWithConfiguration'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof disassociateConditionWithConfiguration>>, {configurationId: string;conditionId: string}> = (props) => {
          const {configurationId,conditionId} = props ?? {};

          return  disassociateConditionWithConfiguration(configurationId,conditionId,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DisassociateConditionWithConfigurationMutationResult = NonNullable<Awaited<ReturnType<typeof disassociateConditionWithConfiguration>>>
    
    export type DisassociateConditionWithConfigurationMutationError = AxiosError<HTTPValidationError>

    /**
 * @summary Remove Condition Codeset From Configuration
 */
export const useDisassociateConditionWithConfiguration = <TError = AxiosError<HTTPValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof disassociateConditionWithConfiguration>>, TError,{configurationId: string;conditionId: string}, TContext>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof disassociateConditionWithConfiguration>>,
        TError,
        {configurationId: string;conditionId: string},
        TContext
      > => {

      const mutationOptions = getDisassociateConditionWithConfigurationMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    