/**
 * Generated by orval v7.11.2 üç∫
 * Do not edit manually.
 * DIBBs eCR Refiner
 * Please visit the repo for more info: https://github.com/CDCgov/dibbs-ecr-refiner
 * OpenAPI spec version: 1.0.0
 */
import {
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import * as axios from 'axios';
import type {
  AxiosError,
  AxiosRequestConfig,
  AxiosResponse
} from 'axios';

import type {
  GetConditionsResponse
} from '.././schemas';





/**
 * Fetches all available conditions from the database.

Args:
    db (AsyncDatabaseConnection): Database connection.

Returns:
    list[Condition]: List of all conditions.
 * @summary Get Conditions
 */
export const getConditions = (
     options?: AxiosRequestConfig
 ): Promise<AxiosResponse<GetConditionsResponse[]>> => {
    
    
    return axios.default.get(
      `/api/v1/conditions/`,options
    );
  }


export const getGetConditionsQueryKey = () => {
    return [`/api/v1/conditions/`] as const;
    }

    
export const getGetConditionsQueryOptions = <TData = Awaited<ReturnType<typeof getConditions>>, TError = AxiosError<unknown>>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getConditions>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetConditionsQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getConditions>>> = ({ signal }) => getConditions({ signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getConditions>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetConditionsQueryResult = NonNullable<Awaited<ReturnType<typeof getConditions>>>
export type GetConditionsQueryError = AxiosError<unknown>


export function useGetConditions<TData = Awaited<ReturnType<typeof getConditions>>, TError = AxiosError<unknown>>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getConditions>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getConditions>>,
          TError,
          Awaited<ReturnType<typeof getConditions>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetConditions<TData = Awaited<ReturnType<typeof getConditions>>, TError = AxiosError<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getConditions>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getConditions>>,
          TError,
          Awaited<ReturnType<typeof getConditions>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetConditions<TData = Awaited<ReturnType<typeof getConditions>>, TError = AxiosError<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getConditions>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Conditions
 */

export function useGetConditions<TData = Awaited<ReturnType<typeof getConditions>>, TError = AxiosError<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getConditions>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetConditionsQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



