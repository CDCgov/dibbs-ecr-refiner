name: Build and push Refiner image to GHCR

on:
  push:
    branches:
      - "**"

  workflow_dispatch:
    inputs:
      ref:
        description: "Git ref (branch or tag) to build from"
        required: false
        default: main
      version_tag:
        description: "Optional Docker tag to use instead of branch name (`1.2.3`)"
        required: false

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log into GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Make repo owner lowercase
        id: repo
        run: |
          echo "owner=$(echo '${{ github.repository_owner }}' | tr '[:upper:]' '[:lower:]')" >> $GITHUB_OUTPUT

      - name: Determine Docker tags
        id: vars
        run: |
          # Get the branch/ref and version tag
          REF_NAME="${{ github.event.inputs.ref || github.ref_name }}"
          VERSION_TAG="${{ github.event.inputs.version_tag }}"

          # Sanitize ref so it's a valid image tag
          if [ -z "$VERSION_TAG" ]; then
            TAG=$(echo "$REF_NAME" | tr '/' '-' | tr '[:upper:]' '[:lower:]')
          else
            TAG="$VERSION_TAG"
          fi

          # If building `main`, include a `latest` tag
          if [ "$REF_NAME" = "main" ]; then
            echo "tags=ghcr.io/${{ steps.repo.outputs.owner }}/dibbs-ecr-refiner:$TAG,ghcr.io/${{ steps.repo.outputs.owner }}/dibbs-ecr-refiner:latest" >> $GITHUB_OUTPUT
          else
            echo "tags=ghcr.io/${{ steps.repo.outputs.owner }}/dibbs-ecr-refiner:$TAG" >> $GITHUB_OUTPUT
          fi

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: ${{ steps.vars.outputs.tags }}
