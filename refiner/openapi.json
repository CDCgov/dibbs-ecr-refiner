{"openapi": "3.1.0", "info": {"title": "Message Refiner", "description": "# Getting Started with the DIBBs Message Refiner Service\n\n## Introduction\n\nThe DIBBs Message Refiner service offers a REST API to pare down an incoming message to only the user-specified elements.\n\n## Running the Message Refiner\n\nYou can run the Message Refiner run using Docker, any other OCI container runtime (e.g., Podman), or directly from the Python source code.\n\n### Running with Docker (Recommended)\n\nTo run the Message Refiner with Docker, follow these steps.\n\n1. Confirm that you have Docker installed by running `docker -v`. If you don't see a response similar to what's shown below, follow [these instructions](https://docs.docker.com/get-docker/) to install Docker.\n\n2. Download a copy of the Docker image from the repository by running `docker pull ghcr.io/cdcgov/dibbs-ecr-refiner:latest`\n\n3. Run the service with `docker run -p 8080:8080 dibbs-ecr-refiner:latest`.\n\nCongratulations, the Message Refiner should now be running on `localhost:8080`!\n\n### Running from Python Source Code\n\nWe recommend running the Message Refiner from a container, but if that isn't feasible for a given use -case, you can also run the service directly from Python using the steps below.\n\n1. Ensure that both Git and Python 3.13 or higher are installed.\n2. Clone the repository with `git clone https://github.com/CDCgov/dibbs-ecr-refiner`.\n3. Navigate to the top-level directory of this repository.\n4. Make a fresh virtual environment with `python -m venv .venv`.\n5. Activate the virtual environment with `source .venv/bin/activate` (MacOS and Linux), `venv\\Scripts\\activate` (Windows Command Prompt), or `.venv\\Scripts\\Activate.ps1` (Windows Power Shell).\n6. Install all of the Python dependencies for the Message Refiner with `pip install -r requirements.txt` into your virtual environment.\n7. Run the Message Refiner on `localhost:8080` with `python -m uvicorn app.main:app --host 0.0.0.0 --port 8080`.\n\n## Building the Docker Image\n\nTo build the Docker image for the Message Refiner from source instead of downloading it from the repository follow these steps:\n\n1. Ensure that both [Git](https://git-scm.com/book/en/v2/Getting-Started-Installing-Git) and [Docker](https://docs.docker.com/get-docker/) are installed.\n2. Clone the repository with `git clone https://github.com/CDCgov/dibbs-ecr-refiner`.\n3. Navigate to the top-level directory of this repository.\n4. Run `docker build -t refiner .`.\n\n## The API\n\nWhen viewing these docs from the `/redoc` endpoint on a running instance of the Message Refiner or the DIBBs website, detailed documentation on the API will be available below.\n\n## Architecture Diagram\n\n```mermaid\nflowchart LR\n\nsubgraph requests[\"Requests\"]\ndirection TB\nsubgraph GET[\"fas:fa-download <code>GET</code>\"]\nhc[\"<code>/</code>\\n(health check)\"]\nend\nsubgraph PUT[\"fas:fa-upload <code>PUT</code>\"]\necr[\"<code>/ecr</code>\\n(refine eICR)\"]\nend\nend\n\nsubgraph service[REST API Service]\ndirection TB\nsubgraph mr[\"fab:fa-docker container\"]\nrefiner[\"fab:fa-python <code>refiner<br>HTTP:8080/</code>\"]\nrefiner <==> db[\"fas:fa-database PostgreSQL\"]\nend\nend\n\nsubgraph response[\"Responses\"]\nsubgraph JSON[\"fa:fa-file-alt <code>JSON</code>\"]\nrsp-hc[\"fa:fa-file-code <code>OK</code> fa:fa-thumbs-up\"]\nend\nsubgraph XML[\"fas:fa-chevron-left fas:fa-chevron-right <code>XML</code>\"]\nrsp-ecr[\"fas:fa-file-code Refined eICR\"]\nend\nend\n\nhc -.-> mr -.-> rsp-hc\necr ===> mr ===> rsp-ecr\n\n```\n\n## Additional notes on eICR Refinement\n\nFor further details on `<section>`, `<entry>`, and `<templateId>` elements, please see [eICR-Notes.md](eICR-Notes.md) for an explanation of trigger code `<templateId>`s, which sections they're in, and the `<observation>` data that should be returned in the refined eICR output.\n\n```\n\n```\n", "version": "1.0.0"}, "paths": {"/api/user": {"get": {"tags": ["user"], "summary": "Get User", "description": "Returns the current logged-in user's information.\n\nReads user info from the session or token.\n\nReturns:\n    JSON object with user claims if authenticated.\n\nRaises:\n    HTTPException 401 if user not authenticated.", "operationId": "getUser", "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"anyOf": [{"$ref": "#/components/schemas/UserResponse"}, {"type": "null"}], "title": "Response Getuser"}}}}}}}, "/api/v1/conditions/": {"get": {"tags": ["conditions"], "summary": "Get Conditions", "description": "Fetches all available conditions from the database.\n\nArgs:\n    db (AsyncDatabaseConnection): Database connection.\n\nReturns:\n    list[Condition]: List of all conditions.", "operationId": "getConditions", "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"items": {"$ref": "#/components/schemas/GetConditionsResponse"}, "type": "array", "title": "Response Getconditions"}}}}}}}, "/api/v1/configurations/": {"get": {"tags": ["configurations"], "summary": "Get Configurations", "description": "Returns a list of configurations based on the logged-in user.\n\nReturns:\n    List of configuration objects.", "operationId": "getConfigurations", "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"items": {"$ref": "#/components/schemas/GetConfigurationsResponse"}, "type": "array", "title": "Response Getconfigurations"}}}}}}, "post": {"tags": ["configurations"], "summary": "Create Configuration", "description": "Create a new configuration for a jurisdiction.", "operationId": "createConfiguration", "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/CreateConfigInput"}}}, "required": true}, "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/CreateConfigurationResponse"}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}}, "/api/v1/configurations/{configuration_id}": {"get": {"tags": ["configurations"], "summary": "Get Configuration", "description": "Get a single configuration by its ID.\n\nArgs:\n    configuration_id (str): ID of the configuration record\n    user (dict[str, Any], optional): _description_. Defaults to Depends(get_logged_in_user).\n    db (AsyncDatabaseConnection, optional): _description_. Defaults to Depends(get_db).\n\nReturns:\n    GetConfigurationsResponse: Response from the API", "operationId": "getConfiguration", "parameters": [{"name": "configuration_id", "in": "path", "required": true, "schema": {"type": "string", "title": "Configuration Id"}}], "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/GetConfigurationsResponse"}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}}, "/api/v1/demo/upload": {"post": {"tags": ["demo"], "summary": "Demo Upload", "description": "Grabs an eCR zip file from the file system and runs it through the upload/refine process.", "operationId": "uploadEcr", "requestBody": {"content": {"multipart/form-data": {"schema": {"$ref": "#/components/schemas/Body_uploadEcr"}}}}, "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/RefinedTestingDocument"}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}}, "/api/v1/demo/download": {"get": {"summary": "Demo Download", "description": "Download the unrefined sample eCR zip file.", "operationId": "demo_download_api_v1_demo_download_get", "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {}}}}}}}}, "components": {"schemas": {"Body_uploadEcr": {"properties": {"uploaded_file": {"anyOf": [{"type": "string", "format": "binary"}, {"type": "null"}], "title": "Uploaded File"}}, "type": "object", "title": "Body_uploadEcr"}, "Condition": {"properties": {"code": {"type": "string", "title": "Code"}, "display_name": {"type": "string", "title": "Display Name"}, "refined_eicr": {"type": "string", "title": "Refined Eicr"}, "stats": {"items": {"type": "string"}, "type": "array", "title": "Stats"}, "processing_info": {"$ref": "#/components/schemas/ConditionProcessingInfo"}}, "type": "object", "required": ["code", "display_name", "refined_eicr", "stats", "processing_info"], "title": "Condition", "description": "Model for a Condition."}, "ConditionProcessingInfo": {"properties": {"condition_specific": {"type": "boolean", "title": "Condition Specific"}, "sections_processed": {"type": "string", "title": "Sections Processed"}, "method": {"type": "string", "title": "Method"}}, "type": "object", "required": ["condition_specific", "sections_processed", "method"], "title": "ConditionProcessingInfo", "description": "Model for a Condition's processing information."}, "CreateConfigInput": {"properties": {"condition_id": {"type": "string", "title": "Condition Id"}}, "type": "object", "required": ["condition_id"], "title": "CreateConfigInput", "description": "Body required to create a new configuration."}, "CreateConfigurationResponse": {"properties": {"id": {"type": "string", "format": "uuid", "title": "Id"}, "name": {"type": "string", "title": "Name"}}, "type": "object", "required": ["id", "name"], "title": "CreateConfigurationResponse", "description": "Configuration creation response model."}, "GetConditionsResponse": {"properties": {"id": {"type": "string", "format": "uuid", "title": "Id"}, "display_name": {"type": "string", "title": "Display Name"}}, "type": "object", "required": ["id", "display_name"], "title": "GetConditionsResponse", "description": "Conditions response model."}, "GetConfigurationsResponse": {"properties": {"id": {"type": "string", "format": "uuid", "title": "Id"}, "name": {"type": "string", "title": "Name"}, "is_active": {"type": "boolean", "title": "Is Active"}}, "type": "object", "required": ["id", "name", "is_active"], "title": "GetConfigurationsResponse", "description": "Model for a user-defined configuration."}, "HTTPValidationError": {"properties": {"detail": {"items": {"$ref": "#/components/schemas/ValidationError"}, "type": "array", "title": "Detail"}}, "type": "object", "title": "HTTPValidationError"}, "RefinedTestingDocument": {"properties": {"message": {"type": "string", "title": "Message"}, "conditions_found": {"type": "integer", "title": "Conditions Found"}, "conditions": {"items": {"$ref": "#/components/schemas/Condition"}, "type": "array", "title": "Conditions"}, "unrefined_eicr": {"type": "string", "title": "Unrefined Eicr"}, "processing_notes": {"items": {"type": "string"}, "type": "array", "title": "Processing Notes"}, "refined_download_url": {"type": "string", "title": "Refined Download Url"}}, "type": "object", "required": ["message", "conditions_found", "conditions", "unrefined_eicr", "processing_notes", "refined_download_url"], "title": "RefinedTestingDocument", "description": "Model for the response when uploading a document in the testing suite."}, "UserResponse": {"properties": {"id": {"type": "string", "format": "uuid", "title": "Id"}, "username": {"type": "string", "title": "Username"}}, "type": "object", "required": ["id", "username"], "title": "UserResponse", "description": "User response model."}, "ValidationError": {"properties": {"loc": {"items": {"anyOf": [{"type": "string"}, {"type": "integer"}]}, "type": "array", "title": "Location"}, "msg": {"type": "string", "title": "Message"}, "type": {"type": "string", "title": "Error Type"}}, "type": "object", "required": ["loc", "msg", "type"], "title": "ValidationError"}}}}